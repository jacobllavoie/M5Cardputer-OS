; PlatformIO Project Configuration File

[platformio]
; The default source directory containing all firmware sources.
src_dir = src
default_envs = launcher, radio, ohms_law, led_controller, calculator, richmat_controller, richmat_sniffer

[env]
; Common settings inherited by all environments
platform = espressif32
board = m5stack-stamps3
framework = arduino
monitor_speed = 115200
board_build.partitions = default_ota.csv
extra_scripts = custom_program_name.py

lib_extra_dirs = lib/M5CardputerOS_core lib/settings_manager lib/ui lib/input lib/wifi lib/ota lib/web_server lib/load_launcher lib/sd_card

lib_deps =
    m5stack/M5Cardputer
    bblanchon/ArduinoJson @ ^7.0.4
    adafruit/Adafruit NeoPixel
    ESP32-audioI2S
    HTTPClient
    arduinoFFT
    Preferences
    settings_manager
    me-no-dev/ESPAsyncWebServer @ ^1.2.3
    me-no-dev/AsyncTCP @ ^1.1.1

build_flags =
    -D M5UNIFIED_PCBREV_M5Cardputer
    -D DEBUG_MODE=0
    -D ENABLE_SD_CARD
    -D ENABLE_WIFI
    -D ENABLE_WEB_SERVER
    -D ENABLE_OTA
    -D ENABLE_SETTINGS_PERSISTENCE
    -D ENABLE_VERBOSE_BOOT

; ----------------------------------------------------------------

[env:launcher]
; Build ONLY the files in the 'src/launcher' folder
build_src_filter = +<launcher/>
custom_prog_name = launcher

; ----------------------------------------------------------------

[env:radio]
; Build ONLY the files in the 'src/apps
build_src_filter = +<apps/radio/>
custom_prog_name = radio

[env:ohms_law]
build_src_filter = +<apps/ohms_law/>
custom_prog_name = ohms_law

[env:led_controller]
build_src_filter = +<apps/led/>
custom_prog_name = led_controller

[env:calculator]
build_src_filter = +<apps/calculator/>
custom_prog_name = calculator

[env:richmat_controller]
build_src_filter = +<apps/richmat_controller/>
custom_prog_name = richmat_controller

[env:richmat_sniffer]
build_src_filter = +<apps/richmat_sniffer/>
custom_prog_name = richmat_sniffer

; ### **3. How to Use the Sniffer**

; This part is very important for it to work correctly.

; 1.  **Turn off your actual smart bed.** Unplug it from the wall. This is critical because if both the real bed and the Cardputer are on, the app might connect to the real one.
; 2.  Build and upload the `ble_command_sniffer` app to your Cardputer.
; 3.  Launch the app from the main menu. The screen will say "Status: Waiting for App..."
; 4.  Open the official Richmat app on your phone.
; 5.  Tell the app to connect to your bed. It should find and connect to the Cardputer, which is now pretending to be the bed. The Cardputer's screen should change to "Status: App Connected."
; 6.  Using the phone app, press the buttons for the features that weren't working (like Neck Up/Down).
; 7.  As you press the buttons, the **exact byte commands** will appear on the Cardputer's screen.
